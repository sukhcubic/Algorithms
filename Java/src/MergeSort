
public class MergeSort {

	// Refer https://www.coursera.org/learn/algorithms-part1/lecture/ARWDq/mergesort
	// for details and techniques to improve performance
	
	private static int[] sort(int[] a) {
      sort(a, new int[a.length], 0, a.length-1);
      return a;
	}

	private static void sort(int[] a, int aux[], int lo, int hi) {
		if(lo>=hi) {
			return;
		}
		int mid = (lo+hi)/2;
		sort(a,aux, lo, mid);
		sort(a,aux, mid+1, hi);
		merge(a,aux, lo, mid, hi);
	}
	
	private static void merge(int[] a, int aux[], int lo,int mid, int hi) {

      int l = lo;
      int m = mid+1;
      int lx = lo;
      
      for(int x = lo; x <= hi; x++) {
    	 aux[x] = a[x];
      }
      for(int x = lo; x <=hi; x++) {
    	     // copying remaining if any
        if(l > m ) {
        	a[x] = aux[m++];
        	  // copying remaining if any 	
        }else if(m > hi) {
        	a[x] = aux[l++];
        }
        else if(aux[l] > aux[m]) {
    		 a[x] = aux[m++];
    	 }else {
    		 a[x]= aux[l++];
    	 }
      }
      
//      while(l <= mid && m <= hi ) {
//    	  if(aux[l] < aux[m]) {
//     		 a[lx++] = aux[l++];
//     	 }else {
//     		 a[lx++]= aux[m++];
//     	 }
//      }
      
	}
	
	public static void main(String[] args) {
		int[] a = new int[] {10, 7, 12, 8, 3, 2};
		sort(a);
		for (int i : a) {
			System.out.println(i);
		}
	}
}
